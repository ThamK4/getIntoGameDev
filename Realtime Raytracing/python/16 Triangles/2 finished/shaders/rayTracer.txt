#version 430

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
    float roughness;
};

struct Triangle {
    vec3 corner_a;
    float r;
    vec3 corner_b;
    float g;
    vec3 corner_c;
    float b;
    vec3 normal;
    float padding4;
};

struct Node {
    vec3 min_corner;
    float sphere_count;
    vec3 max_corner;
    float contents;
};

struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct RenderState {
    vec3 color;
    float t;
    vec3 position;
    bool hit;
    vec3 normal;
    float roughness;
};

// input/output
layout(local_size_x = 8, local_size_y = 8) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

//Scene data
uniform Camera viewer;
layout(std430, binding = 1) buffer triangleData {
    Triangle[] triangles;
};
layout(std430, binding = 2) buffer nodeData {
    Node[] nodes;
};
layout(std430, binding = 3) buffer indexData {
    int[] indices;
};
uniform samplerCube sky_cube;

RenderState trace(Ray ray);

void hit(Ray ray, Sphere sphere, float tMin, float tMax, inout RenderState renderstate);

void hit(Ray ray, Triangle triangle, float tMin, float tMax, inout RenderState renderstate);

float hit(Ray ray, Node node, float nearestHit);

void main() {

    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(img_output);

    vec3 finalColor = vec3(0.0);
    float horizontalCoefficient = (float(pixel_coords.x) * 2 - screen_size.x) / screen_size.x;
    
    float verticalCoefficient = (float(pixel_coords.y) * 2 - screen_size.y) / screen_size.x;

    Ray ray;
    ray.origin = viewer.position;
    ray.direction = normalize(viewer.forwards + horizontalCoefficient * viewer.right + verticalCoefficient * viewer.up);
    
    vec3 pixel = vec3(1.0);
    RenderState renderState;

    for (int bounce = 0; bounce < 4; bounce++) {
        

        renderState = trace(ray);

        //unpack color
        pixel = pixel * renderState.color;

        //early exit
        if (!renderState.hit) {
            break;
        }

        //set up ray for next trace
        ray.origin = renderState.position;
        ray.direction = normalize(reflect(ray.direction, renderState.normal));

    }

    if (renderState.hit) {
        pixel = vec3(0.0);
    }

    finalColor = pixel;

    imageStore(img_output, pixel_coords, vec4(finalColor,1.0));
}

RenderState trace(Ray ray) {

    RenderState renderState;
    renderState.hit = false;
    vec3 unit_direction = normalize(ray.direction);
    float nearestHit = 9999999;
    bool hitSomething = false;

    Node node = nodes[0];
    Node stack[15];
    int stackPos = 0;

    while (true) {

        int contents = int(node.contents);
        int sphere_count = int(node.sphere_count);
    
        if (sphere_count > 0) {
    
            for (int i = 0; i < sphere_count; i++) {

                int index = indices[i + contents];

                hit(ray, triangles[index], 0.001, nearestHit, renderState);

                if (renderState.hit) {
                    nearestHit = renderState.t;
                    hitSomething = true;
                }
            }
            if (stackPos == 0) {
                break;
            }
            else {
                node = stack[--stackPos];
                continue;
            }
        }

        else {
            Node left_child = nodes[contents];
            Node right_child = nodes[contents + 1];

            float dist1 = hit(ray, left_child, nearestHit);
            float dist2 = hit(ray, right_child, nearestHit);

            if (dist1 > dist2) {
                Node temp = left_child;
                left_child = right_child;
                right_child = temp;

                float temp_dist = dist1;
                dist1 = dist2;
                dist2 = temp_dist;
            }

            if (dist1 > nearestHit) {
                if (stackPos == 0) {
                    break;
                }
                else {
                    stackPos -= 1;
                    node = stack[stackPos];
                }
            }
            else {
                node = left_child;
                if (dist2 <= nearestHit) {
                    stack[stackPos] = right_child;
                    stackPos += 1;
                }
            }
        }
    }

    if (!hitSomething) {
        renderState.color = vec3(texture(sky_cube, ray.direction));
    }
    else {
        renderState.hit = true;
    }
        
    return renderState;
}

void hit(Ray ray, Sphere sphere, float tMin, float tMax, inout RenderState renderState) {

    vec3 co = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(ray.direction, co);
    float c = dot(co, co) - sphere.radius * sphere.radius;
    float discriminant = b * b - (4 * a * c);
    
    if (discriminant > 0.0) {

        float t = (-b - sqrt(discriminant)) / (2 * a);

        if (t > tMin && t < tMax) {

            renderState.position = ray.origin + t * ray.direction;
            renderState.normal = normalize(renderState.position - sphere.center);
            renderState.t = t;
            renderState.color = sphere.color;
            renderState.roughness = sphere.roughness;
            renderState.hit = true;
            return;
        }
    }
    renderState.hit = false;
}

void hit(Ray ray, Triangle triangle, float tMin, float tMax, inout RenderState renderState) {

    renderState.hit = false;
    renderState.roughness = 0.0;

    vec3 norm = triangle.normal;
    float ray_dot_tri = dot(ray.direction, norm);

    if (ray_dot_tri > 0.0) {
        norm = norm * -1;
        ray_dot_tri = ray_dot_tri * -1;
    }
    
    if (abs(ray_dot_tri) < 0.00001) {
        return;
    }

    mat3 system_matrix = mat3(ray.direction, triangle.corner_a - triangle.corner_b, triangle.corner_a - triangle.corner_c);
    float denominator = determinant(system_matrix);
    if (abs(denominator) < 0.00001) {
        return;
    }

    system_matrix = mat3(ray.direction, triangle.corner_a - ray.origin, triangle.corner_a - triangle.corner_c);
    float u = determinant(system_matrix) / denominator;
    if (u < 0.0 || u > 1.0) {
        return;
    }

    system_matrix = mat3(ray.direction, triangle.corner_a - triangle.corner_b, triangle.corner_a - ray.origin);
    float v = determinant(system_matrix) / denominator;
    if (v < 0.0 || u + v > 1.0) {
        return;
    }

    system_matrix = mat3(triangle.corner_a - ray.origin, triangle.corner_a - triangle.corner_b, triangle.corner_a - triangle.corner_c);
    float t = determinant(system_matrix) / denominator;

    if (t > tMin && t < tMax) {

        renderState.position = ray.origin + t * ray.direction;
        renderState.normal = norm;
        renderState.t = t;
        renderState.color = vec3(triangle.r, triangle.g, triangle.b);
        renderState.hit = true;
    }
}

float hit(Ray ray, Node node, float nearestHit) {

    vec3 tMin = (node.min_corner - ray.origin) / ray.direction;
    vec3 tMax = (node.max_corner - ray.origin) / ray.direction;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    if (tNear <= tFar && tFar > 0 && tNear < nearestHit) {
        return tNear;
    }
    else {
        return 999999999;
    }
}