#version 450

struct Vertex {
    vec2 position;
    vec2 padding1;
    vec3 color;
    float padding2;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout (set = 0, binding = 0, rgba8) uniform image2D colorBuffer;
layout (std140, set = 1, binding = 0) readonly buffer vertexBuffer {
    Vertex vertices[];
};

vec3 get_barycentric_coordinate(vec2 a, vec2 b, vec2 c, vec2 p) {
    
    vec3 bc = cross(vec3(a.x - p.x, b.x - a.x, c.x - a.x), vec3(a.y - p.y, b.y - a.y, c.y - a.y));

    if (abs(bc.x) < 1) {
        return vec3(-1, 1, 1);
    }

    return vec3(1 - (bc.y + bc.z) / bc.x, bc.y / bc.x, bc.z / bc.x);
}

void main() {

    int index = int(gl_GlobalInvocationID.x);
    vec2 screen_size = 0.5 * vec2(imageSize(colorBuffer));

    if (index >= 1) {
        return;
    }
    
    int triangle_index = 3 * index;

    Vertex vertex_a = vertices[triangle_index];
    Vertex vertex_b = vertices[triangle_index + 1];
    Vertex vertex_c = vertices[triangle_index + 2];

    vec2 pos_a = screen_size * (1 + vertex_a.position);
    vec3 color_a = vertex_a.color;
    vec2 pos_b = screen_size * (1 + vertex_b.position);
    vec3 color_b = vertex_b.color;
    vec2 pos_c = screen_size * (1 + vertex_c.position);
    vec3 color_c = vertex_c.color;

    ivec2 bbox_min = ivec2(min(pos_a, min(pos_b, pos_c)));
    ivec2 bbox_max = ivec2(max(pos_a, max(pos_b, pos_c)));

    for (int x = max(0, bbox_min.x); x <= min(2 * screen_size.x - 1, bbox_max.x); x++) {
        for (int y = max(0, bbox_min.y); y <= min(2 * screen_size.y - 1, bbox_max.y); y++) {

            vec3 bc = get_barycentric_coordinate(pos_a, pos_b, pos_c, vec2(x,y));
            if (bc.x < 0 || bc.y < 0 || bc.z < 0) {
                continue;
            }

            vec3 color = bc.x * color_a + bc.y * color_b + bc.z * color_c;
        
            imageStore(colorBuffer, ivec2(x,y), vec4(color, 1.0));
        }
    }
}