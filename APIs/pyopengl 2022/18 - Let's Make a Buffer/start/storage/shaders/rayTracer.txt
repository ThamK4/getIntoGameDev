#version 430

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
    float reflectance;
    float eta;
    float padding1;
    float padding2;
    float padding3;
};

struct Node {
    vec3 min_corner;
    float sphere_count;
    vec3 max_corner;
    float contents;
};

struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

struct Ray {
    vec3 origin;
    vec3 direction;
    vec3 energy;
    int depth;
    bool early_exit;
};

struct RenderState {
    float t;
    bool hit;
    int index;
    bool backface;
};

// input/output
layout(local_size_x = 8, local_size_y = 8) in;
layout(rgba8, binding = 0) uniform image2D img_output;

//Scene data
uniform Camera viewer;
layout(std430, binding = 1) buffer sphereData {
    Sphere[] spheres;
};
layout(std430, binding = 2) buffer nodeData {
    Node[] nodes;
};
layout(std430, binding = 3) buffer indexData {
    int[] indices;
};
uniform samplerCube sky_cube;

const vec3 ambient = vec3(176.0 / 255, 1.0, 188.0 / 255);

RenderState trace(Ray ray);

//---- Intersection Tests ----//
void hit(Ray ray, int sphereIndex, float tMin, float tMax, inout RenderState renderstate);
float hit(Ray ray, Node node, float nearestHit);

//---- Ray-Surface Interactions ----//
void scatter(inout Ray refraction_ray, inout Ray reflection_ray, RenderState renderState);
void reflect_ray(inout Ray ray, vec3 normal, int sphere_index);
void refract_ray(inout Ray ray, vec3 normal, int sphere_index, bool backface);
void miss(inout Ray ray);

void main() {

    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(img_output);

    float horizontalCoefficient = (float(pixel_coords.x) * 2 - screen_size.x) / screen_size.x;
    
    float verticalCoefficient = (float(pixel_coords.y) * 2 - screen_size.y) / screen_size.x;

    Ray rays[4];
    Ray ray;
    ray.origin = viewer.position;
    ray.direction = viewer.forwards + horizontalCoefficient * viewer.right + verticalCoefficient * viewer.up;
    ray.energy = vec3(1.0);
    ray.depth = 0;
    ray.early_exit = false;
    
    vec3 pixel = vec3(0.0);
    RenderState renderState;

    //Trace, spawning many rays!
    int stackPos = 0;
    while (true) {

        if (ray.early_exit) {
            miss(ray);
            pixel = pixel + ray.energy;

            if (stackPos == 0) {
                break;
            }
            else {
                stackPos = stackPos - 1;
                ray = rays[stackPos];
                continue;
            }
        }
        
        //Trace the current ray.
        renderState = trace(ray);
        if (renderState.hit) {
            Ray reflection;
            scatter(ray, reflection, renderState);
            if (!reflection.early_exit) {
                rays[stackPos] = reflection;
                stackPos = stackPos + 1;
            }
        }
        else {
            miss(ray);
            pixel = pixel + ray.energy;

            if (stackPos == 0) {
                break;
            }
            else {
                stackPos = stackPos - 1;
                ray = rays[stackPos];
            }
        }
    }

    imageStore(img_output, pixel_coords, vec4(pixel,1.0));
}

RenderState trace(Ray ray) {

    RenderState renderState;
    renderState.hit = false;
    vec3 unit_direction = normalize(ray.direction);
    float nearestHit = 9999999;
    bool hitSomething = false;

    Node node = nodes[0];
    Node stack[12];
    int stackPos = 0;

    while (true) {

        int contents = int(node.contents);
        int sphere_count = int(node.sphere_count);
    
        if (sphere_count > 0) {
    
            for (int i = 0; i < sphere_count; i++) {

                int sphereIndex = indices[i + contents];

                hit(ray, sphereIndex, 0.001, nearestHit, renderState);

                if (renderState.hit) {
                    nearestHit = renderState.t;
                    hitSomething = true;
                }
            }
            if (stackPos == 0) {
                break;
            }
            else {
                node = stack[--stackPos];
                continue;
            }
        }

        else {
            Node left_child = nodes[contents];
            Node right_child = nodes[contents + 1];

            float dist1 = hit(ray, left_child, nearestHit);
            float dist2 = hit(ray, right_child, nearestHit);

            if (dist1 > dist2) {
                Node temp = left_child;
                left_child = right_child;
                right_child = temp;

                float temp_dist = dist1;
                dist1 = dist2;
                dist2 = temp_dist;
            }

            if (dist1 > nearestHit) {
                if (stackPos == 0) {
                    break;
                }
                else {
                    stackPos -= 1;
                    node = stack[stackPos];
                }
            }
            else {
                node = left_child;
                if (dist2 <= nearestHit) {
                    stack[stackPos] = right_child;
                    stackPos += 1;
                }
            }
        }
    }

    if (hitSomething) {
        renderState.hit = true;
    }
        
    return renderState;
}

void hit(Ray ray, int sphereIndex, float tMin, float tMax, inout RenderState renderState) {

    Sphere sphere = spheres[sphereIndex];

    vec3 co = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(ray.direction, co);
    float c = dot(co, co) - sphere.radius * sphere.radius;
    float discriminant = b * b - (4 * a * c);
    
    if (discriminant > 0.0) {

        float t1 = (-b - sqrt(discriminant)) / (2 * a);
        float t2 = (-b + sqrt(discriminant)) / (2 * a);

        if (t1 > tMin && t1 < tMax) {
            renderState.t = t1;
            renderState.index = sphereIndex;
            renderState.hit = true;
            renderState.backface = false;
            return;
        }
        if (t2 > tMin && t2 < tMax) {
            renderState.t = t2;
            renderState.index = sphereIndex;
            renderState.hit = true;
            renderState.backface = true;
            return;
        }
    }
    else {
        renderState.hit = false;
    }
}

float hit(Ray ray, Node node, float nearestHit) {

    vec3 tMin = (node.min_corner - ray.origin) / ray.direction;
    vec3 tMax = (node.max_corner - ray.origin) / ray.direction;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    if (tNear <= tFar && tFar > 0 && tNear < nearestHit) {
        return tNear;
    }
    else {
        return 999999999;
    }
}

void scatter(inout Ray refraction_ray, inout Ray reflection_ray, RenderState renderState) {

    Sphere sphere = spheres[renderState.index];
    vec3 hit_pos = refraction_ray.origin + renderState.t * refraction_ray.direction;
    vec3 normal = normalize(hit_pos - sphere.center);

    //set ray's position
    refraction_ray.origin = hit_pos;
    reflection_ray.origin = hit_pos;

    //spawn a reflection ray
    reflection_ray.direction = refraction_ray.direction;
    reflection_ray.energy = refraction_ray.energy;

    if (renderState.backface) {
        normal = -1.0 * normal;
        refract_ray(refraction_ray, normal, renderState.index, true);

        reflection_ray.early_exit = true;
        return;
    }
    else {
        refract_ray(refraction_ray, normal, renderState.index, false);
        reflect_ray(reflection_ray, normal, renderState.index);

        refraction_ray.depth = refraction_ray.depth + 1;
        refraction_ray.early_exit = refraction_ray.early_exit || refraction_ray.depth >= 2;
        reflection_ray.depth = refraction_ray.depth;
        reflection_ray.early_exit = reflection_ray.depth >= 2;
    }
}

void reflect_ray(inout Ray ray, vec3 normal, int sphere_index) {

    Sphere sphere = spheres[sphere_index];

    //apply reflectance factor
    ray.energy = ray.energy * sphere.reflectance;

    //ray reflects
    ray.direction = normalize(reflect(ray.direction, normal));
}

void refract_ray(inout Ray ray, vec3 normal, int sphere_index, bool backface) {

    Sphere sphere = spheres[sphere_index];

    //sphere tints the ray as it passes through
    ray.energy = (1.0 - sphere.reflectance) * ray.energy * sphere.color;

    float eta;
    if (backface) {
        eta = 1.0 / sphere.eta;
    }
    else {
        eta = sphere.eta;
    }
    ray.direction = refract(ray.direction, normal, sphere.eta);
    float ray_length = length(ray.direction);
    if (ray_length < 0.000001) {
        ray.early_exit = true;
        return;
    }
    else {
        ray.direction = 1.0 / ray_length * ray.direction;
    }
}

void miss(inout Ray ray) {
    ray.energy = ray.energy * vec3(texture(sky_cube, ray.direction));
}